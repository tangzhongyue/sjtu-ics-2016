                      | # 515030910312 唐仲乐
                      | # Modification of sum_list code to sum the elements of a linked list.(use the recursive version)
                      | # Execution begins at address 0
  0x000:              | 	.pos 0
  0x000: 30f400010000 | init:	irmovl	Stack, %esp  	# Set up Stack pointer
  0x006: 2045         | 	rrmovl	%esp, %ebp  	# Set up base pointer
  0x008: 30f018000000 | 	irmovl	ele1,%eax
  0x00e: a00f         | 	pushl	%eax
  0x010: 8030000000   | 	call	Rsumlist	# Execute sum_list
  0x015: 00           | 	halt			#halt
                      | 
                      | # Sample linked list
  0x018:              | 	.align 4
  0x018:              | ele1:
  0x018: 0a000000     | 	.long 0x00a
  0x01c: 20000000     | 	.long ele2
  0x020:              | ele2:
  0x020: b0000000     | 	.long 0x0b0
  0x024: 28000000     | 	.long ele3
  0x028:              | ele3:
  0x028: 000c0000     | 	.long 0xc00
  0x02c: 00000000     | 	.long 0
                      | 
                      | 	#int rsum_list(list_ptr ls)
  0x030:              | Rsumlist:
  0x030: a05f         | 	pushl	%ebp
  0x032: 2045         | 	rrmovl	%esp,%ebp
  0x034: a07f         | 	pushl	%edi			
  0x036: 501508000000 | 	mrmovl	8(%ebp),%ecx
  0x03c: 6300         | 	xorl	%eax,%eax
  0x03e: 6211         | 	andl	%ecx,%ecx	#if(!ls)return 0;
  0x040: 735c000000   | 	je	End
  0x045: 507100000000 | 	mrmovl	(%ecx),%edi	#int val = ls->val;
  0x04b: 502104000000 | 	mrmovl	4(%ecx),%edx	#int rest = rsum_list(ls->next);
  0x051: a02f         | 	pushl	%edx
  0x053: 8030000000   | 	call	Rsumlist
  0x058: 6070         | 	addl	%edi,%eax
  0x05a: b02f         | 	popl	%edx
  0x05c: b07f         | End:	popl	%edi
  0x05e: b05f         | 	popl	%ebp
  0x060: 90           | 	ret
                      | 
  0x100:              | 	.pos 0x100
  0x100:              | Stack:	# The stack goes here
