#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
# 
# Include your name and ID here.
# 515030910312 唐仲乐
# Describe how and why you modified the baseline code.
# Use loop unrolling, each loop now deals with 8 value
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	iaddl $-8,%edx		# len -= 8
	jl Remain		# if len < 0, goto Remain:
Loop:	mrmovl (%ebx), %esi	# read val from src
	rmmovl %esi, (%ecx)	# store src[0] to dst
	andl %esi, %esi		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddl $1, %eax		# count++
Npos1:	mrmovl 4(%ebx),%esi	# read val from src+1
	rmmovl %esi,4(%ecx)	# store src[1] to dst+1
	andl %esi,%esi		# val <= 0?
	jle Npos2		# if so, goto Npos2:
	iaddl $1, %eax		# count++
Npos2:	mrmovl 8(%ebx), %esi	# read val from src+2
	rmmovl %esi, 8(%ecx)	# store src[2] to dst+2
	andl %esi, %esi		# val <= 0?
	jle Npos3		# if so, goto Npos3:
	iaddl $1, %eax		# count++
Npos3:	mrmovl 12(%ebx),%esi	# read val from src+3
	rmmovl %esi,12(%ecx)	# store src[3] to dst+3
	andl %esi,%esi		# val <= 0?
	jle Npos4		# if so, goto Npos4:
	iaddl $1, %eax		# count++
Npos4:	mrmovl 16(%ebx), %esi	# read val from src+4
	rmmovl %esi, 16(%ecx)	# store src[4] to dst+4
	andl %esi, %esi		# val <= 0?
	jle Npos5		# if so, goto Npos5:
	iaddl $1, %eax		# count++
Npos5:	mrmovl 20(%ebx),%esi	# read val from src+5
	rmmovl %esi,20(%ecx)	# store src[5] to dst+5
	andl %esi,%esi		# val <= 0?
	jle Npos6		# if so, goto Npos6:
	iaddl $1, %eax		# count++
Npos6:	mrmovl 24(%ebx), %esi	# read val from sr+6
	rmmovl %esi, 24(%ecx)	# store src[6] to dst+6
	andl %esi, %esi		# val <= 0?
	jle Npos7		# if so, goto Npos7:
	iaddl $1, %eax		# count++
Npos7:	mrmovl 28(%ebx),%esi	# read val from src+7
	rmmovl %esi,28(%ecx)	# store src[7] to dst+7
	andl %esi,%esi		# val <= 0?
	jle Next		# if so, goto Next:
	iaddl $1, %eax		# count++
Next:	iaddl $32, %ebx		# src+=32
	iaddl $32, %ecx		# dst+=32
	iaddl $-8, %edx		# len-=8
	jge Loop		# if len > 0, goto Loop:
Remain:	iaddl $7, %edx		# restore len of remain and len--
	jl Done			# if len < 0, goto Done
	mrmovl (%ebx), %esi	# read val from src
	rmmovl %esi, (%ecx)	# store src[0] to dst
	andl %esi, %esi		# val <= 0?
	jle Rest1		# if so, goto Rest1:
 	iaddl $1, %eax		# count++
Rest1:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 4(%ebx),%esi	# read val from src+1
	rmmovl %esi,4(%ecx)	# store src[1] to dst+1
	andl %esi,%esi		# val <= 0?
	jle Rest2		# if so, goto Rest2:
 	iaddl $1, %eax		# count++
Rest2:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 8(%ebx), %esi	# read val from src+2
	rmmovl %esi, 8(%ecx)	# store src[2] to dst+2
	andl %esi, %esi		# val <= 0?
	jle Rest3		# if so, goto Rest3:
 	iaddl $1, %eax		# count++
Rest3:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 12(%ebx),%esi	# read val from src+3
	rmmovl %esi,12(%ecx)	# store src[3] to dst+3
	andl %esi,%esi		# val <= 0?
	jle Rest4		# if so, goto Rest4:
 	iaddl $1, %eax		# count++
Rest4:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 16(%ebx), %esi	# read val from src+4
	rmmovl %esi, 16(%ecx)	# store src[4] to dst
	andl %esi, %esi		# val <= 0?
	jle Rest5		# if so, goto Rest5:
 	iaddl $1, %eax		# count++
Rest5:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 20(%ebx),%esi	# read val from src+5
	rmmovl %esi,20(%ecx)	# store src[5] to dst+5
	andl %esi,%esi		# val <= 0?
	jle Rest6		# if so, goto Rest6:
 	iaddl $1, %eax		# count++
Rest6:	iaddl $-1, %edx		# len--
	jl Done			# if len < 0, goto Done
	mrmovl 24(%ebx), %esi	# read val from src+6
	rmmovl %esi, 24(%ecx)	# store src[6] to dst+6
	andl %esi, %esi		# val <= 0?
	jle Done		# if so, goto Rest1:
 	iaddl $1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long 2
	.long -3
	.long 4
	.long -5
	.long 6
	.long -7
	.long 8
	.long 9
	.long 10
	.long 11
	.long 12
	.long 13
	.long 14
	.long 15
	.long -16
	.long -17
	.long 18
	.long -19
	.long 20
	.long 21
	.long -22
	.long 23
	.long 24
	.long -25
	.long 26
	.long -27
	.long 28
	.long -29
	.long -30
	.long -31
	.long 32
	.long -33
	.long 34
	.long 35
	.long -36
	.long -37
	.long -38
	.long 39
	.long -40
	.long 41
	.long 42
	.long -43
	.long -44
	.long 45
	.long -46
	.long -47
	.long 48
	.long 49
	.long -50
	.long -51
	.long 52
	.long 53
	.long -54
	.long 55
	.long -56
	.long -57
	.long -58
	.long -59
	.long -60
	.long -61
	.long -62
	.long -63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
